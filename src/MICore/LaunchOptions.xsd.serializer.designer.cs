// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------ 
// <auto-generated> 
//     This code was generated by a tool. 
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------ 

#pragma warning disable 219

ï»¿#if _DYNAMIC_XMLSERIALIZER_COMPILATION
#endif
namespace Microsoft.Xml.Serialization.GeneratedAssembly {

    public class XmlSerializationWriter1 : System.Xml.Serialization.XmlSerializationWriter {

        public void Write21_AndroidLaunchOptions(object o) {
            WriteStartDocument();
            if (o == null) {
                WriteEmptyTag(@"AndroidLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
                return;
            }
            TopLevelElement();
            Write4_AndroidLaunchOptions(@"AndroidLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", ((global::MICore.Xml.LaunchOptions.AndroidLaunchOptions)o), false, false);
        }

        public void Write22_TargetArchitecture(object o) {
            WriteStartDocument();
            if (o == null) {
                WriteEmptyTag(@"TargetArchitecture", @"");
                return;
            }
            WriteElementString(@"TargetArchitecture", @"", Write1_TargetArchitecture(((global::MICore.Xml.LaunchOptions.TargetArchitecture)o)));
        }

        public void Write23_MIMode(object o) {
            WriteStartDocument();
            if (o == null) {
                WriteEmptyTag(@"MIMode", @"");
                return;
            }
            WriteElementString(@"MIMode", @"", Write2_MIMode(((global::MICore.Xml.LaunchOptions.MIMode)o)));
        }

        public void Write24_Command(object o) {
            WriteStartDocument();
            if (o == null) {
                WriteNullTagLiteral(@"Command", @"");
                return;
            }
            TopLevelElement();
            Write5_Command(@"Command", @"", ((global::MICore.Xml.LaunchOptions.Command)o), true, false);
        }

        public void Write25_BaseLaunchOptions(object o) {
            WriteStartDocument();
            if (o == null) {
                WriteNullTagLiteral(@"BaseLaunchOptions", @"");
                return;
            }
            TopLevelElement();
            Write7_BaseLaunchOptions(@"BaseLaunchOptions", @"", ((global::MICore.Xml.LaunchOptions.BaseLaunchOptions)o), true, false);
        }

        public void Write26_Item(object o) {
            WriteStartDocument();
            if (o == null) {
                WriteEmptyTag(@"BaseLaunchOptionsLaunchCompleteCommand", @"");
                return;
            }
            WriteElementString(@"BaseLaunchOptionsLaunchCompleteCommand", @"", Write8_Item(((global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand)o)));
        }

        public void Write27_IOSLaunchOptions(object o) {
            WriteStartDocument();
            if (o == null) {
                WriteEmptyTag(@"IOSLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
                return;
            }
            TopLevelElement();
            Write11_IOSLaunchOptions(@"IOSLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", ((global::MICore.Xml.LaunchOptions.IOSLaunchOptions)o), false, false);
        }

        public void Write28_IOSLaunchOptionsIOSDebugTarget(object o) {
            WriteStartDocument();
            if (o == null) {
                WriteEmptyTag(@"IOSLaunchOptionsIOSDebugTarget", @"");
                return;
            }
            WriteElementString(@"IOSLaunchOptionsIOSDebugTarget", @"", Write12_IOSLaunchOptionsIOSDebugTarget(((global::MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget)o)));
        }

        public void Write29_IOSLaunchOptionsSecure(object o) {
            WriteStartDocument();
            if (o == null) {
                WriteEmptyTag(@"IOSLaunchOptionsSecure", @"");
                return;
            }
            WriteElementString(@"IOSLaunchOptionsSecure", @"", Write13_IOSLaunchOptionsSecure(((global::MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure)o)));
        }

        public void Write30_BlackBerryLaunchOptions(object o) {
            WriteStartDocument();
            if (o == null) {
                WriteEmptyTag(@"BlackBerryLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
                return;
            }
            TopLevelElement();
            Write15_BlackBerryLaunchOptions(@"BlackBerryLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", ((global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptions)o), false, false);
        }

        public void Write31_Item(object o) {
            WriteStartDocument();
            if (o == null) {
                WriteEmptyTag(@"BlackBerryLaunchOptionsTargetType", @"");
                return;
            }
            WriteElementString(@"BlackBerryLaunchOptionsTargetType", @"", Write16_Item(((global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType)o)));
        }

        public void Write32_LocalLaunchOptions(object o) {
            WriteStartDocument();
            if (o == null) {
                WriteEmptyTag(@"LocalLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
                return;
            }
            TopLevelElement();
            Write17_LocalLaunchOptions(@"LocalLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", ((global::MICore.Xml.LaunchOptions.LocalLaunchOptions)o), false, false);
        }

        public void Write33_SerialPortLaunchOptions(object o) {
            WriteStartDocument();
            if (o == null) {
                WriteEmptyTag(@"SerialPortLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
                return;
            }
            TopLevelElement();
            Write18_SerialPortLaunchOptions(@"SerialPortLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", ((global::MICore.Xml.LaunchOptions.SerialPortLaunchOptions)o), false, false);
        }

        public void Write34_PipeLaunchOptions(object o) {
            WriteStartDocument();
            if (o == null) {
                WriteEmptyTag(@"PipeLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
                return;
            }
            TopLevelElement();
            Write19_PipeLaunchOptions(@"PipeLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", ((global::MICore.Xml.LaunchOptions.PipeLaunchOptions)o), false, false);
        }

        public void Write35_TcpLaunchOptions(object o) {
            WriteStartDocument();
            if (o == null) {
                WriteEmptyTag(@"TcpLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
                return;
            }
            TopLevelElement();
            Write20_TcpLaunchOptions(@"TcpLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", ((global::MICore.Xml.LaunchOptions.TcpLaunchOptions)o), false, false);
        }

        void Write20_TcpLaunchOptions(string n, string ns, global::MICore.Xml.LaunchOptions.TcpLaunchOptions o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::MICore.Xml.LaunchOptions.TcpLaunchOptions)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
            WriteAttribute(@"ExePath", @"", ((global::System.String)o.@ExePath));
            WriteAttribute(@"ExeArguments", @"", ((global::System.String)o.@ExeArguments));
            WriteAttribute(@"WorkingDirectory", @"", ((global::System.String)o.@WorkingDirectory));
            WriteAttribute(@"VisualizerFile", @"", ((global::System.String)o.@VisualizerFile));
            WriteAttribute(@"TargetArchitecture", @"", Write1_TargetArchitecture(((global::MICore.Xml.LaunchOptions.TargetArchitecture)o.@TargetArchitecture)));
            WriteAttribute(@"AdditionalSOLibSearchPath", @"", ((global::System.String)o.@AdditionalSOLibSearchPath));
            if (o.@MIModeSpecified) {
                WriteAttribute(@"MIMode", @"", Write2_MIMode(((global::MICore.Xml.LaunchOptions.MIMode)o.@MIMode)));
            }
            WriteAttribute(@"Hostname", @"", ((global::System.String)o.@Hostname));
            WriteAttribute(@"Port", @"", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@Port)));
            if (o.@SecureSpecified) {
                WriteAttribute(@"Secure", @"", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@Secure)));
            }
            {
                global::MICore.Xml.LaunchOptions.Command[] a = (global::MICore.Xml.LaunchOptions.Command[])((global::MICore.Xml.LaunchOptions.Command[])o.@SetupCommands);
                if (a != null){
                    WriteStartElement(@"SetupCommands", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", null, false);
                    for (int ia = 0; ia < a.Length; ia++) {
                        Write5_Command(@"Command", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", ((global::MICore.Xml.LaunchOptions.Command)a[ia]), false, false);
                    }
                    WriteEndElement();
                }
            }
            {
                global::MICore.Xml.LaunchOptions.Command[] a = (global::MICore.Xml.LaunchOptions.Command[])((global::MICore.Xml.LaunchOptions.Command[])o.@CustomLaunchSetupCommands);
                if (a != null){
                    WriteStartElement(@"CustomLaunchSetupCommands", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", null, false);
                    for (int ia = 0; ia < a.Length; ia++) {
                        Write5_Command(@"Command", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", ((global::MICore.Xml.LaunchOptions.Command)a[ia]), false, false);
                    }
                    WriteEndElement();
                }
            }
            if (o.@LaunchCompleteCommandSpecified) {
                WriteElementString(@"LaunchCompleteCommand", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", Write6_Item(((global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand)o.@LaunchCompleteCommand)));
            }
            if (o.@MIModeSpecified) {
            }
            if (o.@SecureSpecified) {
            }
            WriteEndElement(o);
        }

        string Write6_Item(global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand v) {
            string s = null;
            switch (v) {
                case global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand.@execrun: s = @"exec-run"; break;
                case global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand.@execcontinue: s = @"exec-continue"; break;
                case global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand.@None: s = @"None"; break;
                default: throw CreateInvalidEnumValueException(((System.Int64)v).ToString(System.Globalization.CultureInfo.InvariantCulture), @"MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand");
            }
            return s;
        }

        void Write5_Command(string n, string ns, global::MICore.Xml.LaunchOptions.Command o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::MICore.Xml.LaunchOptions.Command)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"Command", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
            if (o.@IgnoreFailuresSpecified) {
                WriteAttribute(@"IgnoreFailures", @"", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@IgnoreFailures)));
            }
            WriteAttribute(@"Description", @"", ((global::System.String)o.@Description));
            if (o.@IgnoreFailuresSpecified) {
            }
            if ((object)(o.@Value) != null){
                WriteValue(((global::System.String)o.@Value));
            }
            WriteEndElement(o);
        }

        string Write2_MIMode(global::MICore.Xml.LaunchOptions.MIMode v) {
            string s = null;
            switch (v) {
                case global::MICore.Xml.LaunchOptions.MIMode.@gdb: s = @"gdb"; break;
                case global::MICore.Xml.LaunchOptions.MIMode.@lldb: s = @"lldb"; break;
                case global::MICore.Xml.LaunchOptions.MIMode.@clrdbg: s = @"clrdbg"; break;
                default: throw CreateInvalidEnumValueException(((System.Int64)v).ToString(System.Globalization.CultureInfo.InvariantCulture), @"MICore.Xml.LaunchOptions.MIMode");
            }
            return s;
        }

        string Write1_TargetArchitecture(global::MICore.Xml.LaunchOptions.TargetArchitecture v) {
            string s = null;
            switch (v) {
                case global::MICore.Xml.LaunchOptions.TargetArchitecture.@x86: s = @"x86"; break;
                case global::MICore.Xml.LaunchOptions.TargetArchitecture.@arm: s = @"arm"; break;
                case global::MICore.Xml.LaunchOptions.TargetArchitecture.@mips: s = @"mips"; break;
                case global::MICore.Xml.LaunchOptions.TargetArchitecture.@x64: s = @"x64"; break;
                case global::MICore.Xml.LaunchOptions.TargetArchitecture.@amd64: s = @"amd64"; break;
                case global::MICore.Xml.LaunchOptions.TargetArchitecture.@x86_64: s = @"x86_64"; break;
                case global::MICore.Xml.LaunchOptions.TargetArchitecture.@X86: s = @"X86"; break;
                case global::MICore.Xml.LaunchOptions.TargetArchitecture.@ARM: s = @"ARM"; break;
                case global::MICore.Xml.LaunchOptions.TargetArchitecture.@MIPS: s = @"MIPS"; break;
                case global::MICore.Xml.LaunchOptions.TargetArchitecture.@X64: s = @"X64"; break;
                case global::MICore.Xml.LaunchOptions.TargetArchitecture.@AMD64: s = @"AMD64"; break;
                case global::MICore.Xml.LaunchOptions.TargetArchitecture.@X86_64: s = @"X86_64"; break;
                default: throw CreateInvalidEnumValueException(((System.Int64)v).ToString(System.Globalization.CultureInfo.InvariantCulture), @"MICore.Xml.LaunchOptions.TargetArchitecture");
            }
            return s;
        }

        void Write19_PipeLaunchOptions(string n, string ns, global::MICore.Xml.LaunchOptions.PipeLaunchOptions o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::MICore.Xml.LaunchOptions.PipeLaunchOptions)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
            WriteAttribute(@"ExePath", @"", ((global::System.String)o.@ExePath));
            WriteAttribute(@"ExeArguments", @"", ((global::System.String)o.@ExeArguments));
            WriteAttribute(@"WorkingDirectory", @"", ((global::System.String)o.@WorkingDirectory));
            WriteAttribute(@"VisualizerFile", @"", ((global::System.String)o.@VisualizerFile));
            WriteAttribute(@"TargetArchitecture", @"", Write1_TargetArchitecture(((global::MICore.Xml.LaunchOptions.TargetArchitecture)o.@TargetArchitecture)));
            WriteAttribute(@"AdditionalSOLibSearchPath", @"", ((global::System.String)o.@AdditionalSOLibSearchPath));
            if (o.@MIModeSpecified) {
                WriteAttribute(@"MIMode", @"", Write2_MIMode(((global::MICore.Xml.LaunchOptions.MIMode)o.@MIMode)));
            }
            WriteAttribute(@"PipePath", @"", ((global::System.String)o.@PipePath));
            WriteAttribute(@"PipeArguments", @"", ((global::System.String)o.@PipeArguments));
            {
                global::MICore.Xml.LaunchOptions.Command[] a = (global::MICore.Xml.LaunchOptions.Command[])((global::MICore.Xml.LaunchOptions.Command[])o.@SetupCommands);
                if (a != null){
                    WriteStartElement(@"SetupCommands", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", null, false);
                    for (int ia = 0; ia < a.Length; ia++) {
                        Write5_Command(@"Command", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", ((global::MICore.Xml.LaunchOptions.Command)a[ia]), false, false);
                    }
                    WriteEndElement();
                }
            }
            {
                global::MICore.Xml.LaunchOptions.Command[] a = (global::MICore.Xml.LaunchOptions.Command[])((global::MICore.Xml.LaunchOptions.Command[])o.@CustomLaunchSetupCommands);
                if (a != null){
                    WriteStartElement(@"CustomLaunchSetupCommands", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", null, false);
                    for (int ia = 0; ia < a.Length; ia++) {
                        Write5_Command(@"Command", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", ((global::MICore.Xml.LaunchOptions.Command)a[ia]), false, false);
                    }
                    WriteEndElement();
                }
            }
            if (o.@LaunchCompleteCommandSpecified) {
                WriteElementString(@"LaunchCompleteCommand", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", Write6_Item(((global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand)o.@LaunchCompleteCommand)));
            }
            if (o.@MIModeSpecified) {
            }
            WriteEndElement(o);
        }

        void Write18_SerialPortLaunchOptions(string n, string ns, global::MICore.Xml.LaunchOptions.SerialPortLaunchOptions o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::MICore.Xml.LaunchOptions.SerialPortLaunchOptions)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
            WriteAttribute(@"ExePath", @"", ((global::System.String)o.@ExePath));
            WriteAttribute(@"ExeArguments", @"", ((global::System.String)o.@ExeArguments));
            WriteAttribute(@"WorkingDirectory", @"", ((global::System.String)o.@WorkingDirectory));
            WriteAttribute(@"VisualizerFile", @"", ((global::System.String)o.@VisualizerFile));
            WriteAttribute(@"TargetArchitecture", @"", Write1_TargetArchitecture(((global::MICore.Xml.LaunchOptions.TargetArchitecture)o.@TargetArchitecture)));
            WriteAttribute(@"AdditionalSOLibSearchPath", @"", ((global::System.String)o.@AdditionalSOLibSearchPath));
            if (o.@MIModeSpecified) {
                WriteAttribute(@"MIMode", @"", Write2_MIMode(((global::MICore.Xml.LaunchOptions.MIMode)o.@MIMode)));
            }
            WriteAttribute(@"Port", @"", ((global::System.String)o.@Port));
            {
                global::MICore.Xml.LaunchOptions.Command[] a = (global::MICore.Xml.LaunchOptions.Command[])((global::MICore.Xml.LaunchOptions.Command[])o.@SetupCommands);
                if (a != null){
                    WriteStartElement(@"SetupCommands", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", null, false);
                    for (int ia = 0; ia < a.Length; ia++) {
                        Write5_Command(@"Command", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", ((global::MICore.Xml.LaunchOptions.Command)a[ia]), false, false);
                    }
                    WriteEndElement();
                }
            }
            {
                global::MICore.Xml.LaunchOptions.Command[] a = (global::MICore.Xml.LaunchOptions.Command[])((global::MICore.Xml.LaunchOptions.Command[])o.@CustomLaunchSetupCommands);
                if (a != null){
                    WriteStartElement(@"CustomLaunchSetupCommands", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", null, false);
                    for (int ia = 0; ia < a.Length; ia++) {
                        Write5_Command(@"Command", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", ((global::MICore.Xml.LaunchOptions.Command)a[ia]), false, false);
                    }
                    WriteEndElement();
                }
            }
            if (o.@LaunchCompleteCommandSpecified) {
                WriteElementString(@"LaunchCompleteCommand", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", Write6_Item(((global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand)o.@LaunchCompleteCommand)));
            }
            if (o.@MIModeSpecified) {
            }
            WriteEndElement(o);
        }

        void Write17_LocalLaunchOptions(string n, string ns, global::MICore.Xml.LaunchOptions.LocalLaunchOptions o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::MICore.Xml.LaunchOptions.LocalLaunchOptions)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
            WriteAttribute(@"ExePath", @"", ((global::System.String)o.@ExePath));
            WriteAttribute(@"ExeArguments", @"", ((global::System.String)o.@ExeArguments));
            WriteAttribute(@"WorkingDirectory", @"", ((global::System.String)o.@WorkingDirectory));
            WriteAttribute(@"VisualizerFile", @"", ((global::System.String)o.@VisualizerFile));
            WriteAttribute(@"TargetArchitecture", @"", Write1_TargetArchitecture(((global::MICore.Xml.LaunchOptions.TargetArchitecture)o.@TargetArchitecture)));
            WriteAttribute(@"AdditionalSOLibSearchPath", @"", ((global::System.String)o.@AdditionalSOLibSearchPath));
            if (o.@MIModeSpecified) {
                WriteAttribute(@"MIMode", @"", Write2_MIMode(((global::MICore.Xml.LaunchOptions.MIMode)o.@MIMode)));
            }
            WriteAttribute(@"MIDebuggerPath", @"", ((global::System.String)o.@MIDebuggerPath));
            WriteAttribute(@"MIDebuggerServerAddress", @"", ((global::System.String)o.@MIDebuggerServerAddress));
            {
                global::MICore.Xml.LaunchOptions.Command[] a = (global::MICore.Xml.LaunchOptions.Command[])((global::MICore.Xml.LaunchOptions.Command[])o.@SetupCommands);
                if (a != null){
                    WriteStartElement(@"SetupCommands", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", null, false);
                    for (int ia = 0; ia < a.Length; ia++) {
                        Write5_Command(@"Command", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", ((global::MICore.Xml.LaunchOptions.Command)a[ia]), false, false);
                    }
                    WriteEndElement();
                }
            }
            {
                global::MICore.Xml.LaunchOptions.Command[] a = (global::MICore.Xml.LaunchOptions.Command[])((global::MICore.Xml.LaunchOptions.Command[])o.@CustomLaunchSetupCommands);
                if (a != null){
                    WriteStartElement(@"CustomLaunchSetupCommands", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", null, false);
                    for (int ia = 0; ia < a.Length; ia++) {
                        Write5_Command(@"Command", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", ((global::MICore.Xml.LaunchOptions.Command)a[ia]), false, false);
                    }
                    WriteEndElement();
                }
            }
            if (o.@LaunchCompleteCommandSpecified) {
                WriteElementString(@"LaunchCompleteCommand", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", Write6_Item(((global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand)o.@LaunchCompleteCommand)));
            }
            if (o.@MIModeSpecified) {
            }
            WriteEndElement(o);
        }

        string Write16_Item(global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType v) {
            string s = null;
            switch (v) {
                case global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType.@Phone: s = @"Phone"; break;
                case global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType.@Tablet: s = @"Tablet"; break;
                case global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType.@Simulator: s = @"Simulator"; break;
                default: throw CreateInvalidEnumValueException(((System.Int64)v).ToString(System.Globalization.CultureInfo.InvariantCulture), @"MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType");
            }
            return s;
        }

        void Write15_BlackBerryLaunchOptions(string n, string ns, global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptions o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptions)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
            WriteAttribute(@"GdbPath", @"", ((global::System.String)o.@GdbPath));
            WriteAttribute(@"GdbHostPath", @"", ((global::System.String)o.@GdbHostPath));
            WriteAttribute(@"TargetAddress", @"", ((global::System.String)o.@TargetAddress));
            if (((global::System.UInt32)o.@TargetPort) != (System.UInt32)(8000)) {
                WriteAttribute(@"TargetPort", @"", System.Xml.XmlConvert.ToString((global::System.UInt32)((global::System.UInt32)o.@TargetPort)));
            }
            WriteAttribute(@"TargetType", @"", Write14_Item(((global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType)o.@TargetType)));
            if (((global::System.Boolean)o.@Attach) != false) {
                WriteAttribute(@"Attach", @"", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@Attach)));
            }
            WriteAttribute(@"PID", @"", System.Xml.XmlConvert.ToString((global::System.UInt32)((global::System.UInt32)o.@PID)));
            WriteAttribute(@"NdkHostPath", @"", ((global::System.String)o.@NdkHostPath));
            WriteAttribute(@"NdkTargetPath", @"", ((global::System.String)o.@NdkTargetPath));
            WriteAttribute(@"TargetArchitecture", @"", Write1_TargetArchitecture(((global::MICore.Xml.LaunchOptions.TargetArchitecture)o.@TargetArchitecture)));
            WriteAttribute(@"AdditionalSOLibSearchPath", @"", ((global::System.String)o.@AdditionalSOLibSearchPath));
            if (o.@MIModeSpecified) {
                WriteAttribute(@"MIMode", @"", Write2_MIMode(((global::MICore.Xml.LaunchOptions.MIMode)o.@MIMode)));
            }
            if (o.@MIModeSpecified) {
            }
            WriteEndElement(o);
        }

        string Write14_Item(global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType v) {
            string s = null;
            switch (v) {
                case global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType.@Phone: s = @"Phone"; break;
                case global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType.@Tablet: s = @"Tablet"; break;
                case global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType.@Simulator: s = @"Simulator"; break;
                default: throw CreateInvalidEnumValueException(((System.Int64)v).ToString(System.Globalization.CultureInfo.InvariantCulture), @"MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType");
            }
            return s;
        }

        string Write13_IOSLaunchOptionsSecure(global::MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure v) {
            string s = null;
            switch (v) {
                case global::MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure.@True: s = @"True"; break;
                case global::MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure.@False: s = @"False"; break;
                default: throw CreateInvalidEnumValueException(((System.Int64)v).ToString(System.Globalization.CultureInfo.InvariantCulture), @"MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure");
            }
            return s;
        }

        string Write12_IOSLaunchOptionsIOSDebugTarget(global::MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget v) {
            string s = null;
            switch (v) {
                case global::MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget.@Device: s = @"Device"; break;
                case global::MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget.@Simulator: s = @"Simulator"; break;
                default: throw CreateInvalidEnumValueException(((System.Int64)v).ToString(System.Globalization.CultureInfo.InvariantCulture), @"MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget");
            }
            return s;
        }

        void Write11_IOSLaunchOptions(string n, string ns, global::MICore.Xml.LaunchOptions.IOSLaunchOptions o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::MICore.Xml.LaunchOptions.IOSLaunchOptions)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
            WriteAttribute(@"RemoteMachineName", @"", ((global::System.String)o.@RemoteMachineName));
            WriteAttribute(@"PackageId", @"", ((global::System.String)o.@PackageId));
            WriteAttribute(@"vcremotePort", @"", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@vcremotePort)));
            WriteAttribute(@"IOSDebugTarget", @"", Write9_IOSLaunchOptionsIOSDebugTarget(((global::MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget)o.@IOSDebugTarget)));
            WriteAttribute(@"Secure", @"", Write10_IOSLaunchOptionsSecure(((global::MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure)o.@Secure)));
            WriteAttribute(@"TargetArchitecture", @"", Write1_TargetArchitecture(((global::MICore.Xml.LaunchOptions.TargetArchitecture)o.@TargetArchitecture)));
            WriteAttribute(@"AdditionalSOLibSearchPath", @"", ((global::System.String)o.@AdditionalSOLibSearchPath));
            if (o.@MIModeSpecified) {
                WriteAttribute(@"MIMode", @"", Write2_MIMode(((global::MICore.Xml.LaunchOptions.MIMode)o.@MIMode)));
            }
            if (o.@MIModeSpecified) {
            }
            WriteEndElement(o);
        }

        string Write10_IOSLaunchOptionsSecure(global::MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure v) {
            string s = null;
            switch (v) {
                case global::MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure.@True: s = @"True"; break;
                case global::MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure.@False: s = @"False"; break;
                default: throw CreateInvalidEnumValueException(((System.Int64)v).ToString(System.Globalization.CultureInfo.InvariantCulture), @"MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure");
            }
            return s;
        }

        string Write9_IOSLaunchOptionsIOSDebugTarget(global::MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget v) {
            string s = null;
            switch (v) {
                case global::MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget.@Device: s = @"Device"; break;
                case global::MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget.@Simulator: s = @"Simulator"; break;
                default: throw CreateInvalidEnumValueException(((System.Int64)v).ToString(System.Globalization.CultureInfo.InvariantCulture), @"MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget");
            }
            return s;
        }

        string Write8_Item(global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand v) {
            string s = null;
            switch (v) {
                case global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand.@execrun: s = @"exec-run"; break;
                case global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand.@execcontinue: s = @"exec-continue"; break;
                case global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand.@None: s = @"None"; break;
                default: throw CreateInvalidEnumValueException(((System.Int64)v).ToString(System.Globalization.CultureInfo.InvariantCulture), @"MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand");
            }
            return s;
        }

        void Write7_BaseLaunchOptions(string n, string ns, global::MICore.Xml.LaunchOptions.BaseLaunchOptions o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::MICore.Xml.LaunchOptions.BaseLaunchOptions)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"BaseLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
            WriteAttribute(@"ExePath", @"", ((global::System.String)o.@ExePath));
            WriteAttribute(@"ExeArguments", @"", ((global::System.String)o.@ExeArguments));
            WriteAttribute(@"WorkingDirectory", @"", ((global::System.String)o.@WorkingDirectory));
            WriteAttribute(@"VisualizerFile", @"", ((global::System.String)o.@VisualizerFile));
            WriteAttribute(@"TargetArchitecture", @"", Write1_TargetArchitecture(((global::MICore.Xml.LaunchOptions.TargetArchitecture)o.@TargetArchitecture)));
            WriteAttribute(@"AdditionalSOLibSearchPath", @"", ((global::System.String)o.@AdditionalSOLibSearchPath));
            if (o.@MIModeSpecified) {
                WriteAttribute(@"MIMode", @"", Write2_MIMode(((global::MICore.Xml.LaunchOptions.MIMode)o.@MIMode)));
            }
            {
                global::MICore.Xml.LaunchOptions.Command[] a = (global::MICore.Xml.LaunchOptions.Command[])((global::MICore.Xml.LaunchOptions.Command[])o.@SetupCommands);
                if (a != null){
                    WriteStartElement(@"SetupCommands", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", null, false);
                    for (int ia = 0; ia < a.Length; ia++) {
                        Write5_Command(@"Command", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", ((global::MICore.Xml.LaunchOptions.Command)a[ia]), false, false);
                    }
                    WriteEndElement();
                }
            }
            {
                global::MICore.Xml.LaunchOptions.Command[] a = (global::MICore.Xml.LaunchOptions.Command[])((global::MICore.Xml.LaunchOptions.Command[])o.@CustomLaunchSetupCommands);
                if (a != null){
                    WriteStartElement(@"CustomLaunchSetupCommands", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", null, false);
                    for (int ia = 0; ia < a.Length; ia++) {
                        Write5_Command(@"Command", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", ((global::MICore.Xml.LaunchOptions.Command)a[ia]), false, false);
                    }
                    WriteEndElement();
                }
            }
            if (o.@LaunchCompleteCommandSpecified) {
                WriteElementString(@"LaunchCompleteCommand", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014", Write6_Item(((global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand)o.@LaunchCompleteCommand)));
            }
            if (o.@MIModeSpecified) {
            }
            WriteEndElement(o);
        }

        void Write4_AndroidLaunchOptions(string n, string ns, global::MICore.Xml.LaunchOptions.AndroidLaunchOptions o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::MICore.Xml.LaunchOptions.AndroidLaunchOptions)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
            WriteAttribute(@"Package", @"", ((global::System.String)o.@Package));
            WriteAttribute(@"LaunchActivity", @"", ((global::System.String)o.@LaunchActivity));
            WriteAttribute(@"SDKRoot", @"", ((global::System.String)o.@SDKRoot));
            WriteAttribute(@"NDKRoot", @"", ((global::System.String)o.@NDKRoot));
            WriteAttribute(@"IntermediateDirectory", @"", ((global::System.String)o.@IntermediateDirectory));
            WriteAttribute(@"DeviceId", @"", ((global::System.String)o.@DeviceId));
            WriteAttribute(@"LogcatServiceId", @"", ((global::System.String)o.@LogcatServiceId));
            if (((global::System.Boolean)o.@Attach) != false) {
                WriteAttribute(@"Attach", @"", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@Attach)));
            }
            WriteAttribute(@"TargetArchitecture", @"", Write1_TargetArchitecture(((global::MICore.Xml.LaunchOptions.TargetArchitecture)o.@TargetArchitecture)));
            WriteAttribute(@"AdditionalSOLibSearchPath", @"", ((global::System.String)o.@AdditionalSOLibSearchPath));
            if (o.@MIModeSpecified) {
                WriteAttribute(@"MIMode", @"", Write2_MIMode(((global::MICore.Xml.LaunchOptions.MIMode)o.@MIMode)));
            }
            if (o.@MIModeSpecified) {
            }
            WriteEndElement(o);
        }

        protected override void InitCallbacks() {
        }
    }

    public class XmlSerializationReader1 : System.Xml.Serialization.XmlSerializationReader {

        public object Read21_AndroidLaunchOptions() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id1_AndroidLaunchOptions && (object) Reader.NamespaceURI == (object)id2_Item)) {
                    o = Read4_AndroidLaunchOptions(false, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:AndroidLaunchOptions");
            }
            return (object)o;
        }

        public object Read22_TargetArchitecture() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id3_TargetArchitecture && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    {
                        o = Read1_TargetArchitecture(Reader.ReadElementString());
                    }
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":TargetArchitecture");
            }
            return (object)o;
        }

        public object Read23_MIMode() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id5_MIMode && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    {
                        o = Read2_MIMode(Reader.ReadElementString());
                    }
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":MIMode");
            }
            return (object)o;
        }

        public object Read24_Command() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id6_Command && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read5_Command(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":Command");
            }
            return (object)o;
        }

        public object Read25_BaseLaunchOptions() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id7_BaseLaunchOptions && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read7_BaseLaunchOptions(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":BaseLaunchOptions");
            }
            return (object)o;
        }

        public object Read26_Item() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id8_Item && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    {
                        o = Read8_Item(Reader.ReadElementString());
                    }
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":BaseLaunchOptionsLaunchCompleteCommand");
            }
            return (object)o;
        }

        public object Read27_IOSLaunchOptions() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id9_IOSLaunchOptions && (object) Reader.NamespaceURI == (object)id2_Item)) {
                    o = Read11_IOSLaunchOptions(false, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:IOSLaunchOptions");
            }
            return (object)o;
        }

        public object Read28_IOSLaunchOptionsIOSDebugTarget() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id10_IOSLaunchOptionsIOSDebugTarget && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    {
                        o = Read12_IOSLaunchOptionsIOSDebugTarget(Reader.ReadElementString());
                    }
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":IOSLaunchOptionsIOSDebugTarget");
            }
            return (object)o;
        }

        public object Read29_IOSLaunchOptionsSecure() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id11_IOSLaunchOptionsSecure && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    {
                        o = Read13_IOSLaunchOptionsSecure(Reader.ReadElementString());
                    }
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":IOSLaunchOptionsSecure");
            }
            return (object)o;
        }

        public object Read30_BlackBerryLaunchOptions() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id12_BlackBerryLaunchOptions && (object) Reader.NamespaceURI == (object)id2_Item)) {
                    o = Read15_BlackBerryLaunchOptions(false, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:BlackBerryLaunchOptions");
            }
            return (object)o;
        }

        public object Read31_Item() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id13_Item && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    {
                        o = Read16_Item(Reader.ReadElementString());
                    }
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":BlackBerryLaunchOptionsTargetType");
            }
            return (object)o;
        }

        public object Read32_LocalLaunchOptions() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id14_LocalLaunchOptions && (object) Reader.NamespaceURI == (object)id2_Item)) {
                    o = Read17_LocalLaunchOptions(false, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:LocalLaunchOptions");
            }
            return (object)o;
        }

        public object Read33_SerialPortLaunchOptions() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id15_SerialPortLaunchOptions && (object) Reader.NamespaceURI == (object)id2_Item)) {
                    o = Read18_SerialPortLaunchOptions(false, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:SerialPortLaunchOptions");
            }
            return (object)o;
        }

        public object Read34_PipeLaunchOptions() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id16_PipeLaunchOptions && (object) Reader.NamespaceURI == (object)id2_Item)) {
                    o = Read19_PipeLaunchOptions(false, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:PipeLaunchOptions");
            }
            return (object)o;
        }

        public object Read35_TcpLaunchOptions() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id17_TcpLaunchOptions && (object) Reader.NamespaceURI == (object)id2_Item)) {
                    o = Read20_TcpLaunchOptions(false, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:TcpLaunchOptions");
            }
            return (object)o;
        }

        global::MICore.Xml.LaunchOptions.TcpLaunchOptions Read20_TcpLaunchOptions(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id4_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::MICore.Xml.LaunchOptions.TcpLaunchOptions o;
            o = new global::MICore.Xml.LaunchOptions.TcpLaunchOptions();
            global::MICore.Xml.LaunchOptions.Command[] a_0 = null;
            int ca_0 = 0;
            global::MICore.Xml.LaunchOptions.Command[] a_1 = null;
            int ca_1 = 0;
            bool[] paramsRead = new bool[13];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[3] && ((object) Reader.LocalName == (object)id18_ExePath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@ExePath = Reader.Value;
                    paramsRead[3] = true;
                }
                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id19_ExeArguments && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@ExeArguments = Reader.Value;
                    paramsRead[4] = true;
                }
                else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id20_WorkingDirectory && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@WorkingDirectory = Reader.Value;
                    paramsRead[5] = true;
                }
                else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id21_VisualizerFile && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@VisualizerFile = Reader.Value;
                    paramsRead[6] = true;
                }
                else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id3_TargetArchitecture && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@TargetArchitecture = Read1_TargetArchitecture(Reader.Value);
                    paramsRead[7] = true;
                }
                else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id22_AdditionalSOLibSearchPath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@AdditionalSOLibSearchPath = Reader.Value;
                    paramsRead[8] = true;
                }
                else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id5_MIMode && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@MIMode = Read2_MIMode(Reader.Value);
                    o.@MIModeSpecified = true;
                    paramsRead[9] = true;
                }
                else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id23_Hostname && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Hostname = Reader.Value;
                    paramsRead[10] = true;
                }
                else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id24_Port && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Port = System.Xml.XmlConvert.ToInt32(Reader.Value);
                    paramsRead[11] = true;
                }
                else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id25_Secure && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Secure = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                    o.@SecureSpecified = true;
                    paramsRead[12] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":ExePath, :ExeArguments, :WorkingDirectory, :VisualizerFile, :TargetArchitecture, :AdditionalSOLibSearchPath, :MIMode, :Hostname, :Port, :Secure");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations0 = 0;
            int readerCount0 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (((object) Reader.LocalName == (object)id26_SetupCommands && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        if (!ReadNull()) {
                            global::MICore.Xml.LaunchOptions.Command[] a_0_0 = null;
                            int ca_0_0 = 0;
                            if ((Reader.IsEmptyElement)) {
                                Reader.Skip();
                            }
                            else {
                                Reader.ReadStartElement();
                                Reader.MoveToContent();
                                int whileIterations1 = 0;
                                int readerCount1 = ReaderCount;
                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                        if (((object) Reader.LocalName == (object)id6_Command && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                            a_0_0 = (global::MICore.Xml.LaunchOptions.Command[])EnsureArrayIndex(a_0_0, ca_0_0, typeof(global::MICore.Xml.LaunchOptions.Command));a_0_0[ca_0_0++] = Read5_Command(false, true);
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                        }
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                    }
                                    Reader.MoveToContent();
                                    CheckReaderCount(ref whileIterations1, ref readerCount1);
                                }
                            ReadEndElement();
                            }
                            o.@SetupCommands = (global::MICore.Xml.LaunchOptions.Command[])ShrinkArray(a_0_0, ca_0_0, typeof(global::MICore.Xml.LaunchOptions.Command), false);
                        }
                    }
                    else if (((object) Reader.LocalName == (object)id27_CustomLaunchSetupCommands && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        if (!ReadNull()) {
                            global::MICore.Xml.LaunchOptions.Command[] a_1_0 = null;
                            int ca_1_0 = 0;
                            if ((Reader.IsEmptyElement)) {
                                Reader.Skip();
                            }
                            else {
                                Reader.ReadStartElement();
                                Reader.MoveToContent();
                                int whileIterations2 = 0;
                                int readerCount2 = ReaderCount;
                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                        if (((object) Reader.LocalName == (object)id6_Command && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                            a_1_0 = (global::MICore.Xml.LaunchOptions.Command[])EnsureArrayIndex(a_1_0, ca_1_0, typeof(global::MICore.Xml.LaunchOptions.Command));a_1_0[ca_1_0++] = Read5_Command(false, true);
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                        }
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                    }
                                    Reader.MoveToContent();
                                    CheckReaderCount(ref whileIterations2, ref readerCount2);
                                }
                            ReadEndElement();
                            }
                            o.@CustomLaunchSetupCommands = (global::MICore.Xml.LaunchOptions.Command[])ShrinkArray(a_1_0, ca_1_0, typeof(global::MICore.Xml.LaunchOptions.Command), false);
                        }
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id28_LaunchCompleteCommand && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@LaunchCompleteCommandSpecified = true;
                        {
                            o.@LaunchCompleteCommand = Read6_Item(Reader.ReadElementString());
                        }
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:SetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:CustomLaunchSetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:LaunchCompleteCommand");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:SetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:CustomLaunchSetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:LaunchCompleteCommand");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations0, ref readerCount0);
            }
            ReadEndElement();
            return o;
        }

        global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand Read6_Item(string s) {
            switch (s) {
                case @"exec-run": return global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand.@execrun;
                case @"exec-continue": return global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand.@execcontinue;
                case @"None": return global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand.@None;
                default: throw CreateUnknownConstantException(s, typeof(global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand));
            }
        }

        global::MICore.Xml.LaunchOptions.Command Read5_Command(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id6_Command && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::MICore.Xml.LaunchOptions.Command o;
            o = new global::MICore.Xml.LaunchOptions.Command();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id29_IgnoreFailures && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@IgnoreFailures = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                    o.@IgnoreFailuresSpecified = true;
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id30_Description && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Description = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":IgnoreFailures, :Description");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations3 = 0;
            int readerCount3 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                string tmp = null;
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else if (Reader.NodeType == System.Xml.XmlNodeType.Text || 
                Reader.NodeType == System.Xml.XmlNodeType.CDATA || 
                Reader.NodeType == System.Xml.XmlNodeType.Whitespace || 
                Reader.NodeType == System.Xml.XmlNodeType.SignificantWhitespace) {
                    tmp = ReadString(tmp, false);
                    o.@Value = tmp;
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations3, ref readerCount3);
            }
            ReadEndElement();
            return o;
        }

        global::MICore.Xml.LaunchOptions.MIMode Read2_MIMode(string s) {
            switch (s) {
                case @"gdb": return global::MICore.Xml.LaunchOptions.MIMode.@gdb;
                case @"lldb": return global::MICore.Xml.LaunchOptions.MIMode.@lldb;
                case @"clrdbg": return global::MICore.Xml.LaunchOptions.MIMode.@clrdbg;
                default: throw CreateUnknownConstantException(s, typeof(global::MICore.Xml.LaunchOptions.MIMode));
            }
        }

        global::MICore.Xml.LaunchOptions.TargetArchitecture Read1_TargetArchitecture(string s) {
            switch (s) {
                case @"x86": return global::MICore.Xml.LaunchOptions.TargetArchitecture.@x86;
                case @"arm": return global::MICore.Xml.LaunchOptions.TargetArchitecture.@arm;
                case @"mips": return global::MICore.Xml.LaunchOptions.TargetArchitecture.@mips;
                case @"x64": return global::MICore.Xml.LaunchOptions.TargetArchitecture.@x64;
                case @"amd64": return global::MICore.Xml.LaunchOptions.TargetArchitecture.@amd64;
                case @"x86_64": return global::MICore.Xml.LaunchOptions.TargetArchitecture.@x86_64;
                case @"X86": return global::MICore.Xml.LaunchOptions.TargetArchitecture.@X86;
                case @"ARM": return global::MICore.Xml.LaunchOptions.TargetArchitecture.@ARM;
                case @"MIPS": return global::MICore.Xml.LaunchOptions.TargetArchitecture.@MIPS;
                case @"X64": return global::MICore.Xml.LaunchOptions.TargetArchitecture.@X64;
                case @"AMD64": return global::MICore.Xml.LaunchOptions.TargetArchitecture.@AMD64;
                case @"X86_64": return global::MICore.Xml.LaunchOptions.TargetArchitecture.@X86_64;
                default: throw CreateUnknownConstantException(s, typeof(global::MICore.Xml.LaunchOptions.TargetArchitecture));
            }
        }

        global::MICore.Xml.LaunchOptions.PipeLaunchOptions Read19_PipeLaunchOptions(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id4_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::MICore.Xml.LaunchOptions.PipeLaunchOptions o;
            o = new global::MICore.Xml.LaunchOptions.PipeLaunchOptions();
            global::MICore.Xml.LaunchOptions.Command[] a_0 = null;
            int ca_0 = 0;
            global::MICore.Xml.LaunchOptions.Command[] a_1 = null;
            int ca_1 = 0;
            bool[] paramsRead = new bool[12];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[3] && ((object) Reader.LocalName == (object)id18_ExePath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@ExePath = Reader.Value;
                    paramsRead[3] = true;
                }
                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id19_ExeArguments && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@ExeArguments = Reader.Value;
                    paramsRead[4] = true;
                }
                else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id20_WorkingDirectory && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@WorkingDirectory = Reader.Value;
                    paramsRead[5] = true;
                }
                else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id21_VisualizerFile && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@VisualizerFile = Reader.Value;
                    paramsRead[6] = true;
                }
                else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id3_TargetArchitecture && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@TargetArchitecture = Read1_TargetArchitecture(Reader.Value);
                    paramsRead[7] = true;
                }
                else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id22_AdditionalSOLibSearchPath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@AdditionalSOLibSearchPath = Reader.Value;
                    paramsRead[8] = true;
                }
                else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id5_MIMode && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@MIMode = Read2_MIMode(Reader.Value);
                    o.@MIModeSpecified = true;
                    paramsRead[9] = true;
                }
                else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id31_PipePath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@PipePath = Reader.Value;
                    paramsRead[10] = true;
                }
                else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id32_PipeArguments && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@PipeArguments = Reader.Value;
                    paramsRead[11] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":ExePath, :ExeArguments, :WorkingDirectory, :VisualizerFile, :TargetArchitecture, :AdditionalSOLibSearchPath, :MIMode, :PipePath, :PipeArguments");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations4 = 0;
            int readerCount4 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (((object) Reader.LocalName == (object)id26_SetupCommands && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        if (!ReadNull()) {
                            global::MICore.Xml.LaunchOptions.Command[] a_0_0 = null;
                            int ca_0_0 = 0;
                            if ((Reader.IsEmptyElement)) {
                                Reader.Skip();
                            }
                            else {
                                Reader.ReadStartElement();
                                Reader.MoveToContent();
                                int whileIterations5 = 0;
                                int readerCount5 = ReaderCount;
                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                        if (((object) Reader.LocalName == (object)id6_Command && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                            a_0_0 = (global::MICore.Xml.LaunchOptions.Command[])EnsureArrayIndex(a_0_0, ca_0_0, typeof(global::MICore.Xml.LaunchOptions.Command));a_0_0[ca_0_0++] = Read5_Command(false, true);
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                        }
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                    }
                                    Reader.MoveToContent();
                                    CheckReaderCount(ref whileIterations5, ref readerCount5);
                                }
                            ReadEndElement();
                            }
                            o.@SetupCommands = (global::MICore.Xml.LaunchOptions.Command[])ShrinkArray(a_0_0, ca_0_0, typeof(global::MICore.Xml.LaunchOptions.Command), false);
                        }
                    }
                    else if (((object) Reader.LocalName == (object)id27_CustomLaunchSetupCommands && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        if (!ReadNull()) {
                            global::MICore.Xml.LaunchOptions.Command[] a_1_0 = null;
                            int ca_1_0 = 0;
                            if ((Reader.IsEmptyElement)) {
                                Reader.Skip();
                            }
                            else {
                                Reader.ReadStartElement();
                                Reader.MoveToContent();
                                int whileIterations6 = 0;
                                int readerCount6 = ReaderCount;
                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                        if (((object) Reader.LocalName == (object)id6_Command && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                            a_1_0 = (global::MICore.Xml.LaunchOptions.Command[])EnsureArrayIndex(a_1_0, ca_1_0, typeof(global::MICore.Xml.LaunchOptions.Command));a_1_0[ca_1_0++] = Read5_Command(false, true);
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                        }
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                    }
                                    Reader.MoveToContent();
                                    CheckReaderCount(ref whileIterations6, ref readerCount6);
                                }
                            ReadEndElement();
                            }
                            o.@CustomLaunchSetupCommands = (global::MICore.Xml.LaunchOptions.Command[])ShrinkArray(a_1_0, ca_1_0, typeof(global::MICore.Xml.LaunchOptions.Command), false);
                        }
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id28_LaunchCompleteCommand && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@LaunchCompleteCommandSpecified = true;
                        {
                            o.@LaunchCompleteCommand = Read6_Item(Reader.ReadElementString());
                        }
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:SetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:CustomLaunchSetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:LaunchCompleteCommand");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:SetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:CustomLaunchSetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:LaunchCompleteCommand");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations4, ref readerCount4);
            }
            ReadEndElement();
            return o;
        }

        global::MICore.Xml.LaunchOptions.SerialPortLaunchOptions Read18_SerialPortLaunchOptions(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id4_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::MICore.Xml.LaunchOptions.SerialPortLaunchOptions o;
            o = new global::MICore.Xml.LaunchOptions.SerialPortLaunchOptions();
            global::MICore.Xml.LaunchOptions.Command[] a_0 = null;
            int ca_0 = 0;
            global::MICore.Xml.LaunchOptions.Command[] a_1 = null;
            int ca_1 = 0;
            bool[] paramsRead = new bool[11];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[3] && ((object) Reader.LocalName == (object)id18_ExePath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@ExePath = Reader.Value;
                    paramsRead[3] = true;
                }
                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id19_ExeArguments && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@ExeArguments = Reader.Value;
                    paramsRead[4] = true;
                }
                else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id20_WorkingDirectory && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@WorkingDirectory = Reader.Value;
                    paramsRead[5] = true;
                }
                else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id21_VisualizerFile && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@VisualizerFile = Reader.Value;
                    paramsRead[6] = true;
                }
                else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id3_TargetArchitecture && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@TargetArchitecture = Read1_TargetArchitecture(Reader.Value);
                    paramsRead[7] = true;
                }
                else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id22_AdditionalSOLibSearchPath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@AdditionalSOLibSearchPath = Reader.Value;
                    paramsRead[8] = true;
                }
                else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id5_MIMode && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@MIMode = Read2_MIMode(Reader.Value);
                    o.@MIModeSpecified = true;
                    paramsRead[9] = true;
                }
                else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id24_Port && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Port = Reader.Value;
                    paramsRead[10] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":ExePath, :ExeArguments, :WorkingDirectory, :VisualizerFile, :TargetArchitecture, :AdditionalSOLibSearchPath, :MIMode, :Port");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations7 = 0;
            int readerCount7 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (((object) Reader.LocalName == (object)id26_SetupCommands && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        if (!ReadNull()) {
                            global::MICore.Xml.LaunchOptions.Command[] a_0_0 = null;
                            int ca_0_0 = 0;
                            if ((Reader.IsEmptyElement)) {
                                Reader.Skip();
                            }
                            else {
                                Reader.ReadStartElement();
                                Reader.MoveToContent();
                                int whileIterations8 = 0;
                                int readerCount8 = ReaderCount;
                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                        if (((object) Reader.LocalName == (object)id6_Command && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                            a_0_0 = (global::MICore.Xml.LaunchOptions.Command[])EnsureArrayIndex(a_0_0, ca_0_0, typeof(global::MICore.Xml.LaunchOptions.Command));a_0_0[ca_0_0++] = Read5_Command(false, true);
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                        }
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                    }
                                    Reader.MoveToContent();
                                    CheckReaderCount(ref whileIterations8, ref readerCount8);
                                }
                            ReadEndElement();
                            }
                            o.@SetupCommands = (global::MICore.Xml.LaunchOptions.Command[])ShrinkArray(a_0_0, ca_0_0, typeof(global::MICore.Xml.LaunchOptions.Command), false);
                        }
                    }
                    else if (((object) Reader.LocalName == (object)id27_CustomLaunchSetupCommands && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        if (!ReadNull()) {
                            global::MICore.Xml.LaunchOptions.Command[] a_1_0 = null;
                            int ca_1_0 = 0;
                            if ((Reader.IsEmptyElement)) {
                                Reader.Skip();
                            }
                            else {
                                Reader.ReadStartElement();
                                Reader.MoveToContent();
                                int whileIterations9 = 0;
                                int readerCount9 = ReaderCount;
                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                        if (((object) Reader.LocalName == (object)id6_Command && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                            a_1_0 = (global::MICore.Xml.LaunchOptions.Command[])EnsureArrayIndex(a_1_0, ca_1_0, typeof(global::MICore.Xml.LaunchOptions.Command));a_1_0[ca_1_0++] = Read5_Command(false, true);
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                        }
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                    }
                                    Reader.MoveToContent();
                                    CheckReaderCount(ref whileIterations9, ref readerCount9);
                                }
                            ReadEndElement();
                            }
                            o.@CustomLaunchSetupCommands = (global::MICore.Xml.LaunchOptions.Command[])ShrinkArray(a_1_0, ca_1_0, typeof(global::MICore.Xml.LaunchOptions.Command), false);
                        }
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id28_LaunchCompleteCommand && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@LaunchCompleteCommandSpecified = true;
                        {
                            o.@LaunchCompleteCommand = Read6_Item(Reader.ReadElementString());
                        }
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:SetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:CustomLaunchSetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:LaunchCompleteCommand");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:SetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:CustomLaunchSetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:LaunchCompleteCommand");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations7, ref readerCount7);
            }
            ReadEndElement();
            return o;
        }

        global::MICore.Xml.LaunchOptions.LocalLaunchOptions Read17_LocalLaunchOptions(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id4_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::MICore.Xml.LaunchOptions.LocalLaunchOptions o;
            o = new global::MICore.Xml.LaunchOptions.LocalLaunchOptions();
            global::MICore.Xml.LaunchOptions.Command[] a_0 = null;
            int ca_0 = 0;
            global::MICore.Xml.LaunchOptions.Command[] a_1 = null;
            int ca_1 = 0;
            bool[] paramsRead = new bool[12];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[3] && ((object) Reader.LocalName == (object)id18_ExePath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@ExePath = Reader.Value;
                    paramsRead[3] = true;
                }
                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id19_ExeArguments && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@ExeArguments = Reader.Value;
                    paramsRead[4] = true;
                }
                else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id20_WorkingDirectory && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@WorkingDirectory = Reader.Value;
                    paramsRead[5] = true;
                }
                else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id21_VisualizerFile && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@VisualizerFile = Reader.Value;
                    paramsRead[6] = true;
                }
                else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id3_TargetArchitecture && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@TargetArchitecture = Read1_TargetArchitecture(Reader.Value);
                    paramsRead[7] = true;
                }
                else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id22_AdditionalSOLibSearchPath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@AdditionalSOLibSearchPath = Reader.Value;
                    paramsRead[8] = true;
                }
                else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id5_MIMode && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@MIMode = Read2_MIMode(Reader.Value);
                    o.@MIModeSpecified = true;
                    paramsRead[9] = true;
                }
                else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id33_MIDebuggerPath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@MIDebuggerPath = Reader.Value;
                    paramsRead[10] = true;
                }
                else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id34_MIDebuggerServerAddress && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@MIDebuggerServerAddress = Reader.Value;
                    paramsRead[11] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":ExePath, :ExeArguments, :WorkingDirectory, :VisualizerFile, :TargetArchitecture, :AdditionalSOLibSearchPath, :MIMode, :MIDebuggerPath, :MIDebuggerServerAddress");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations10 = 0;
            int readerCount10 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (((object) Reader.LocalName == (object)id26_SetupCommands && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        if (!ReadNull()) {
                            global::MICore.Xml.LaunchOptions.Command[] a_0_0 = null;
                            int ca_0_0 = 0;
                            if ((Reader.IsEmptyElement)) {
                                Reader.Skip();
                            }
                            else {
                                Reader.ReadStartElement();
                                Reader.MoveToContent();
                                int whileIterations11 = 0;
                                int readerCount11 = ReaderCount;
                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                        if (((object) Reader.LocalName == (object)id6_Command && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                            a_0_0 = (global::MICore.Xml.LaunchOptions.Command[])EnsureArrayIndex(a_0_0, ca_0_0, typeof(global::MICore.Xml.LaunchOptions.Command));a_0_0[ca_0_0++] = Read5_Command(false, true);
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                        }
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                    }
                                    Reader.MoveToContent();
                                    CheckReaderCount(ref whileIterations11, ref readerCount11);
                                }
                            ReadEndElement();
                            }
                            o.@SetupCommands = (global::MICore.Xml.LaunchOptions.Command[])ShrinkArray(a_0_0, ca_0_0, typeof(global::MICore.Xml.LaunchOptions.Command), false);
                        }
                    }
                    else if (((object) Reader.LocalName == (object)id27_CustomLaunchSetupCommands && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        if (!ReadNull()) {
                            global::MICore.Xml.LaunchOptions.Command[] a_1_0 = null;
                            int ca_1_0 = 0;
                            if ((Reader.IsEmptyElement)) {
                                Reader.Skip();
                            }
                            else {
                                Reader.ReadStartElement();
                                Reader.MoveToContent();
                                int whileIterations12 = 0;
                                int readerCount12 = ReaderCount;
                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                        if (((object) Reader.LocalName == (object)id6_Command && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                            a_1_0 = (global::MICore.Xml.LaunchOptions.Command[])EnsureArrayIndex(a_1_0, ca_1_0, typeof(global::MICore.Xml.LaunchOptions.Command));a_1_0[ca_1_0++] = Read5_Command(false, true);
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                        }
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                    }
                                    Reader.MoveToContent();
                                    CheckReaderCount(ref whileIterations12, ref readerCount12);
                                }
                            ReadEndElement();
                            }
                            o.@CustomLaunchSetupCommands = (global::MICore.Xml.LaunchOptions.Command[])ShrinkArray(a_1_0, ca_1_0, typeof(global::MICore.Xml.LaunchOptions.Command), false);
                        }
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id28_LaunchCompleteCommand && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@LaunchCompleteCommandSpecified = true;
                        {
                            o.@LaunchCompleteCommand = Read6_Item(Reader.ReadElementString());
                        }
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:SetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:CustomLaunchSetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:LaunchCompleteCommand");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:SetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:CustomLaunchSetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:LaunchCompleteCommand");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations10, ref readerCount10);
            }
            ReadEndElement();
            return o;
        }

        global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType Read16_Item(string s) {
            switch (s) {
                case @"Phone": return global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType.@Phone;
                case @"Tablet": return global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType.@Tablet;
                case @"Simulator": return global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType.@Simulator;
                default: throw CreateUnknownConstantException(s, typeof(global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType));
            }
        }

        global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptions Read15_BlackBerryLaunchOptions(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id4_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptions o;
            o = new global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptions();
            bool[] paramsRead = new bool[12];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id35_GdbPath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@GdbPath = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id36_GdbHostPath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@GdbHostPath = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id37_TargetAddress && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@TargetAddress = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id38_TargetPort && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@TargetPort = System.Xml.XmlConvert.ToUInt32(Reader.Value);
                    paramsRead[3] = true;
                }
                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id39_TargetType && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@TargetType = Read14_Item(Reader.Value);
                    paramsRead[4] = true;
                }
                else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id40_Attach && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Attach = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                    paramsRead[5] = true;
                }
                else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id41_PID && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@PID = System.Xml.XmlConvert.ToUInt32(Reader.Value);
                    paramsRead[6] = true;
                }
                else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id42_NdkHostPath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@NdkHostPath = Reader.Value;
                    paramsRead[7] = true;
                }
                else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id43_NdkTargetPath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@NdkTargetPath = Reader.Value;
                    paramsRead[8] = true;
                }
                else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id3_TargetArchitecture && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@TargetArchitecture = Read1_TargetArchitecture(Reader.Value);
                    paramsRead[9] = true;
                }
                else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id22_AdditionalSOLibSearchPath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@AdditionalSOLibSearchPath = Reader.Value;
                    paramsRead[10] = true;
                }
                else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id5_MIMode && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@MIMode = Read2_MIMode(Reader.Value);
                    o.@MIModeSpecified = true;
                    paramsRead[11] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":GdbPath, :GdbHostPath, :TargetAddress, :TargetPort, :TargetType, :Attach, :PID, :NdkHostPath, :NdkTargetPath, :TargetArchitecture, :AdditionalSOLibSearchPath, :MIMode");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations13 = 0;
            int readerCount13 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations13, ref readerCount13);
            }
            ReadEndElement();
            return o;
        }

        global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType Read14_Item(string s) {
            switch (s) {
                case @"Phone": return global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType.@Phone;
                case @"Tablet": return global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType.@Tablet;
                case @"Simulator": return global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType.@Simulator;
                default: throw CreateUnknownConstantException(s, typeof(global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType));
            }
        }

        global::MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure Read13_IOSLaunchOptionsSecure(string s) {
            switch (s) {
                case @"True": return global::MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure.@True;
                case @"False": return global::MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure.@False;
                default: throw CreateUnknownConstantException(s, typeof(global::MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure));
            }
        }

        global::MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget Read12_IOSLaunchOptionsIOSDebugTarget(string s) {
            switch (s) {
                case @"Device": return global::MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget.@Device;
                case @"Simulator": return global::MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget.@Simulator;
                default: throw CreateUnknownConstantException(s, typeof(global::MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget));
            }
        }

        global::MICore.Xml.LaunchOptions.IOSLaunchOptions Read11_IOSLaunchOptions(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id4_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::MICore.Xml.LaunchOptions.IOSLaunchOptions o;
            o = new global::MICore.Xml.LaunchOptions.IOSLaunchOptions();
            bool[] paramsRead = new bool[8];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id44_RemoteMachineName && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@RemoteMachineName = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id45_PackageId && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@PackageId = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id46_vcremotePort && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@vcremotePort = System.Xml.XmlConvert.ToInt32(Reader.Value);
                    paramsRead[2] = true;
                }
                else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id47_IOSDebugTarget && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@IOSDebugTarget = Read9_IOSLaunchOptionsIOSDebugTarget(Reader.Value);
                    paramsRead[3] = true;
                }
                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id25_Secure && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Secure = Read10_IOSLaunchOptionsSecure(Reader.Value);
                    paramsRead[4] = true;
                }
                else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id3_TargetArchitecture && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@TargetArchitecture = Read1_TargetArchitecture(Reader.Value);
                    paramsRead[5] = true;
                }
                else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id22_AdditionalSOLibSearchPath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@AdditionalSOLibSearchPath = Reader.Value;
                    paramsRead[6] = true;
                }
                else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id5_MIMode && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@MIMode = Read2_MIMode(Reader.Value);
                    o.@MIModeSpecified = true;
                    paramsRead[7] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":RemoteMachineName, :PackageId, :vcremotePort, :IOSDebugTarget, :Secure, :TargetArchitecture, :AdditionalSOLibSearchPath, :MIMode");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations14 = 0;
            int readerCount14 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations14, ref readerCount14);
            }
            ReadEndElement();
            return o;
        }

        global::MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure Read10_IOSLaunchOptionsSecure(string s) {
            switch (s) {
                case @"True": return global::MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure.@True;
                case @"False": return global::MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure.@False;
                default: throw CreateUnknownConstantException(s, typeof(global::MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure));
            }
        }

        global::MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget Read9_IOSLaunchOptionsIOSDebugTarget(string s) {
            switch (s) {
                case @"Device": return global::MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget.@Device;
                case @"Simulator": return global::MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget.@Simulator;
                default: throw CreateUnknownConstantException(s, typeof(global::MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget));
            }
        }

        global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand Read8_Item(string s) {
            switch (s) {
                case @"exec-run": return global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand.@execrun;
                case @"exec-continue": return global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand.@execcontinue;
                case @"None": return global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand.@None;
                default: throw CreateUnknownConstantException(s, typeof(global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand));
            }
        }

        global::MICore.Xml.LaunchOptions.BaseLaunchOptions Read7_BaseLaunchOptions(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id7_BaseLaunchOptions && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::MICore.Xml.LaunchOptions.BaseLaunchOptions o;
            o = new global::MICore.Xml.LaunchOptions.BaseLaunchOptions();
            global::MICore.Xml.LaunchOptions.Command[] a_0 = null;
            int ca_0 = 0;
            global::MICore.Xml.LaunchOptions.Command[] a_1 = null;
            int ca_1 = 0;
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[3] && ((object) Reader.LocalName == (object)id18_ExePath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@ExePath = Reader.Value;
                    paramsRead[3] = true;
                }
                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id19_ExeArguments && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@ExeArguments = Reader.Value;
                    paramsRead[4] = true;
                }
                else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id20_WorkingDirectory && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@WorkingDirectory = Reader.Value;
                    paramsRead[5] = true;
                }
                else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id21_VisualizerFile && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@VisualizerFile = Reader.Value;
                    paramsRead[6] = true;
                }
                else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id3_TargetArchitecture && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@TargetArchitecture = Read1_TargetArchitecture(Reader.Value);
                    paramsRead[7] = true;
                }
                else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id22_AdditionalSOLibSearchPath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@AdditionalSOLibSearchPath = Reader.Value;
                    paramsRead[8] = true;
                }
                else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id5_MIMode && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@MIMode = Read2_MIMode(Reader.Value);
                    o.@MIModeSpecified = true;
                    paramsRead[9] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":ExePath, :ExeArguments, :WorkingDirectory, :VisualizerFile, :TargetArchitecture, :AdditionalSOLibSearchPath, :MIMode");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations15 = 0;
            int readerCount15 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (((object) Reader.LocalName == (object)id26_SetupCommands && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        if (!ReadNull()) {
                            global::MICore.Xml.LaunchOptions.Command[] a_0_0 = null;
                            int ca_0_0 = 0;
                            if ((Reader.IsEmptyElement)) {
                                Reader.Skip();
                            }
                            else {
                                Reader.ReadStartElement();
                                Reader.MoveToContent();
                                int whileIterations16 = 0;
                                int readerCount16 = ReaderCount;
                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                        if (((object) Reader.LocalName == (object)id6_Command && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                            a_0_0 = (global::MICore.Xml.LaunchOptions.Command[])EnsureArrayIndex(a_0_0, ca_0_0, typeof(global::MICore.Xml.LaunchOptions.Command));a_0_0[ca_0_0++] = Read5_Command(false, true);
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                        }
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                    }
                                    Reader.MoveToContent();
                                    CheckReaderCount(ref whileIterations16, ref readerCount16);
                                }
                            ReadEndElement();
                            }
                            o.@SetupCommands = (global::MICore.Xml.LaunchOptions.Command[])ShrinkArray(a_0_0, ca_0_0, typeof(global::MICore.Xml.LaunchOptions.Command), false);
                        }
                    }
                    else if (((object) Reader.LocalName == (object)id27_CustomLaunchSetupCommands && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        if (!ReadNull()) {
                            global::MICore.Xml.LaunchOptions.Command[] a_1_0 = null;
                            int ca_1_0 = 0;
                            if ((Reader.IsEmptyElement)) {
                                Reader.Skip();
                            }
                            else {
                                Reader.ReadStartElement();
                                Reader.MoveToContent();
                                int whileIterations17 = 0;
                                int readerCount17 = ReaderCount;
                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                        if (((object) Reader.LocalName == (object)id6_Command && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                            a_1_0 = (global::MICore.Xml.LaunchOptions.Command[])EnsureArrayIndex(a_1_0, ca_1_0, typeof(global::MICore.Xml.LaunchOptions.Command));a_1_0[ca_1_0++] = Read5_Command(false, true);
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                        }
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:Command");
                                    }
                                    Reader.MoveToContent();
                                    CheckReaderCount(ref whileIterations17, ref readerCount17);
                                }
                            ReadEndElement();
                            }
                            o.@CustomLaunchSetupCommands = (global::MICore.Xml.LaunchOptions.Command[])ShrinkArray(a_1_0, ca_1_0, typeof(global::MICore.Xml.LaunchOptions.Command), false);
                        }
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id28_LaunchCompleteCommand && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@LaunchCompleteCommandSpecified = true;
                        {
                            o.@LaunchCompleteCommand = Read6_Item(Reader.ReadElementString());
                        }
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:SetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:CustomLaunchSetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:LaunchCompleteCommand");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:SetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:CustomLaunchSetupCommands, http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014:LaunchCompleteCommand");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations15, ref readerCount15);
            }
            ReadEndElement();
            return o;
        }

        global::MICore.Xml.LaunchOptions.AndroidLaunchOptions Read4_AndroidLaunchOptions(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id4_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::MICore.Xml.LaunchOptions.AndroidLaunchOptions o;
            o = new global::MICore.Xml.LaunchOptions.AndroidLaunchOptions();
            bool[] paramsRead = new bool[11];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id48_Package && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Package = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_LaunchActivity && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@LaunchActivity = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id50_SDKRoot && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@SDKRoot = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id51_NDKRoot && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@NDKRoot = Reader.Value;
                    paramsRead[3] = true;
                }
                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id52_IntermediateDirectory && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@IntermediateDirectory = Reader.Value;
                    paramsRead[4] = true;
                }
                else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id53_DeviceId && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@DeviceId = Reader.Value;
                    paramsRead[5] = true;
                }
                else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id54_LogcatServiceId && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@LogcatServiceId = Reader.Value;
                    paramsRead[6] = true;
                }
                else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id40_Attach && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Attach = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                    paramsRead[7] = true;
                }
                else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id3_TargetArchitecture && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@TargetArchitecture = Read1_TargetArchitecture(Reader.Value);
                    paramsRead[8] = true;
                }
                else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id22_AdditionalSOLibSearchPath && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@AdditionalSOLibSearchPath = Reader.Value;
                    paramsRead[9] = true;
                }
                else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id5_MIMode && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@MIMode = Read2_MIMode(Reader.Value);
                    o.@MIModeSpecified = true;
                    paramsRead[10] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":Package, :LaunchActivity, :SDKRoot, :NDKRoot, :IntermediateDirectory, :DeviceId, :LogcatServiceId, :Attach, :TargetArchitecture, :AdditionalSOLibSearchPath, :MIMode");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations18 = 0;
            int readerCount18 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations18, ref readerCount18);
            }
            ReadEndElement();
            return o;
        }

        protected override void InitCallbacks() {
        }

        string id32_PipeArguments;
        string id36_GdbHostPath;
        string id52_IntermediateDirectory;
        string id37_TargetAddress;
        string id34_MIDebuggerServerAddress;
        string id2_Item;
        string id26_SetupCommands;
        string id29_IgnoreFailures;
        string id10_IOSLaunchOptionsIOSDebugTarget;
        string id27_CustomLaunchSetupCommands;
        string id20_WorkingDirectory;
        string id3_TargetArchitecture;
        string id48_Package;
        string id24_Port;
        string id46_vcremotePort;
        string id22_AdditionalSOLibSearchPath;
        string id6_Command;
        string id41_PID;
        string id38_TargetPort;
        string id9_IOSLaunchOptions;
        string id16_PipeLaunchOptions;
        string id53_DeviceId;
        string id21_VisualizerFile;
        string id25_Secure;
        string id43_NdkTargetPath;
        string id4_Item;
        string id40_Attach;
        string id31_PipePath;
        string id13_Item;
        string id12_BlackBerryLaunchOptions;
        string id19_ExeArguments;
        string id7_BaseLaunchOptions;
        string id49_LaunchActivity;
        string id5_MIMode;
        string id11_IOSLaunchOptionsSecure;
        string id42_NdkHostPath;
        string id28_LaunchCompleteCommand;
        string id17_TcpLaunchOptions;
        string id33_MIDebuggerPath;
        string id45_PackageId;
        string id39_TargetType;
        string id8_Item;
        string id54_LogcatServiceId;
        string id30_Description;
        string id51_NDKRoot;
        string id14_LocalLaunchOptions;
        string id50_SDKRoot;
        string id15_SerialPortLaunchOptions;
        string id1_AndroidLaunchOptions;
        string id47_IOSDebugTarget;
        string id23_Hostname;
        string id35_GdbPath;
        string id44_RemoteMachineName;
        string id18_ExePath;

        protected override void InitIDs() {
            id32_PipeArguments = Reader.NameTable.Add(@"PipeArguments");
            id36_GdbHostPath = Reader.NameTable.Add(@"GdbHostPath");
            id52_IntermediateDirectory = Reader.NameTable.Add(@"IntermediateDirectory");
            id37_TargetAddress = Reader.NameTable.Add(@"TargetAddress");
            id34_MIDebuggerServerAddress = Reader.NameTable.Add(@"MIDebuggerServerAddress");
            id2_Item = Reader.NameTable.Add(@"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
            id26_SetupCommands = Reader.NameTable.Add(@"SetupCommands");
            id29_IgnoreFailures = Reader.NameTable.Add(@"IgnoreFailures");
            id10_IOSLaunchOptionsIOSDebugTarget = Reader.NameTable.Add(@"IOSLaunchOptionsIOSDebugTarget");
            id27_CustomLaunchSetupCommands = Reader.NameTable.Add(@"CustomLaunchSetupCommands");
            id20_WorkingDirectory = Reader.NameTable.Add(@"WorkingDirectory");
            id3_TargetArchitecture = Reader.NameTable.Add(@"TargetArchitecture");
            id48_Package = Reader.NameTable.Add(@"Package");
            id24_Port = Reader.NameTable.Add(@"Port");
            id46_vcremotePort = Reader.NameTable.Add(@"vcremotePort");
            id22_AdditionalSOLibSearchPath = Reader.NameTable.Add(@"AdditionalSOLibSearchPath");
            id6_Command = Reader.NameTable.Add(@"Command");
            id41_PID = Reader.NameTable.Add(@"PID");
            id38_TargetPort = Reader.NameTable.Add(@"TargetPort");
            id9_IOSLaunchOptions = Reader.NameTable.Add(@"IOSLaunchOptions");
            id16_PipeLaunchOptions = Reader.NameTable.Add(@"PipeLaunchOptions");
            id53_DeviceId = Reader.NameTable.Add(@"DeviceId");
            id21_VisualizerFile = Reader.NameTable.Add(@"VisualizerFile");
            id25_Secure = Reader.NameTable.Add(@"Secure");
            id43_NdkTargetPath = Reader.NameTable.Add(@"NdkTargetPath");
            id4_Item = Reader.NameTable.Add(@"");
            id40_Attach = Reader.NameTable.Add(@"Attach");
            id31_PipePath = Reader.NameTable.Add(@"PipePath");
            id13_Item = Reader.NameTable.Add(@"BlackBerryLaunchOptionsTargetType");
            id12_BlackBerryLaunchOptions = Reader.NameTable.Add(@"BlackBerryLaunchOptions");
            id19_ExeArguments = Reader.NameTable.Add(@"ExeArguments");
            id7_BaseLaunchOptions = Reader.NameTable.Add(@"BaseLaunchOptions");
            id49_LaunchActivity = Reader.NameTable.Add(@"LaunchActivity");
            id5_MIMode = Reader.NameTable.Add(@"MIMode");
            id11_IOSLaunchOptionsSecure = Reader.NameTable.Add(@"IOSLaunchOptionsSecure");
            id42_NdkHostPath = Reader.NameTable.Add(@"NdkHostPath");
            id28_LaunchCompleteCommand = Reader.NameTable.Add(@"LaunchCompleteCommand");
            id17_TcpLaunchOptions = Reader.NameTable.Add(@"TcpLaunchOptions");
            id33_MIDebuggerPath = Reader.NameTable.Add(@"MIDebuggerPath");
            id45_PackageId = Reader.NameTable.Add(@"PackageId");
            id39_TargetType = Reader.NameTable.Add(@"TargetType");
            id8_Item = Reader.NameTable.Add(@"BaseLaunchOptionsLaunchCompleteCommand");
            id54_LogcatServiceId = Reader.NameTable.Add(@"LogcatServiceId");
            id30_Description = Reader.NameTable.Add(@"Description");
            id51_NDKRoot = Reader.NameTable.Add(@"NDKRoot");
            id14_LocalLaunchOptions = Reader.NameTable.Add(@"LocalLaunchOptions");
            id50_SDKRoot = Reader.NameTable.Add(@"SDKRoot");
            id15_SerialPortLaunchOptions = Reader.NameTable.Add(@"SerialPortLaunchOptions");
            id1_AndroidLaunchOptions = Reader.NameTable.Add(@"AndroidLaunchOptions");
            id47_IOSDebugTarget = Reader.NameTable.Add(@"IOSDebugTarget");
            id23_Hostname = Reader.NameTable.Add(@"Hostname");
            id35_GdbPath = Reader.NameTable.Add(@"GdbPath");
            id44_RemoteMachineName = Reader.NameTable.Add(@"RemoteMachineName");
            id18_ExePath = Reader.NameTable.Add(@"ExePath");
        }
    }

    public abstract class XmlSerializer1 : System.Xml.Serialization.XmlSerializer {
        protected override System.Xml.Serialization.XmlSerializationReader CreateReader() {
            return new XmlSerializationReader1();
        }
        protected override System.Xml.Serialization.XmlSerializationWriter CreateWriter() {
            return new XmlSerializationWriter1();
        }
    }

    public sealed class AndroidLaunchOptionsSerializer : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"AndroidLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriter1)writer).Write21_AndroidLaunchOptions(objectToSerialize);
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReader1)reader).Read21_AndroidLaunchOptions();
        }
    }

    public sealed class TargetArchitectureSerializer : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"TargetArchitecture", @"");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriter1)writer).Write22_TargetArchitecture(objectToSerialize);
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReader1)reader).Read22_TargetArchitecture();
        }
    }

    public sealed class MIModeSerializer : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"MIMode", @"");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriter1)writer).Write23_MIMode(objectToSerialize);
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReader1)reader).Read23_MIMode();
        }
    }

    public sealed class CommandSerializer : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"Command", @"");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriter1)writer).Write24_Command(objectToSerialize);
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReader1)reader).Read24_Command();
        }
    }

    public sealed class BaseLaunchOptionsSerializer : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"BaseLaunchOptions", @"");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriter1)writer).Write25_BaseLaunchOptions(objectToSerialize);
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReader1)reader).Read25_BaseLaunchOptions();
        }
    }

    public sealed class BaseLaunchOptionsLaunchCompleteCommandSerializer : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"BaseLaunchOptionsLaunchCompleteCommand", @"");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriter1)writer).Write26_Item(objectToSerialize);
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReader1)reader).Read26_Item();
        }
    }

    public sealed class IOSLaunchOptionsSerializer : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"IOSLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriter1)writer).Write27_IOSLaunchOptions(objectToSerialize);
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReader1)reader).Read27_IOSLaunchOptions();
        }
    }

    public sealed class IOSLaunchOptionsIOSDebugTargetSerializer : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"IOSLaunchOptionsIOSDebugTarget", @"");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriter1)writer).Write28_IOSLaunchOptionsIOSDebugTarget(objectToSerialize);
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReader1)reader).Read28_IOSLaunchOptionsIOSDebugTarget();
        }
    }

    public sealed class IOSLaunchOptionsSecureSerializer : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"IOSLaunchOptionsSecure", @"");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriter1)writer).Write29_IOSLaunchOptionsSecure(objectToSerialize);
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReader1)reader).Read29_IOSLaunchOptionsSecure();
        }
    }

    public sealed class BlackBerryLaunchOptionsSerializer : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"BlackBerryLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriter1)writer).Write30_BlackBerryLaunchOptions(objectToSerialize);
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReader1)reader).Read30_BlackBerryLaunchOptions();
        }
    }

    public sealed class BlackBerryLaunchOptionsTargetTypeSerializer : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"BlackBerryLaunchOptionsTargetType", @"");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriter1)writer).Write31_Item(objectToSerialize);
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReader1)reader).Read31_Item();
        }
    }

    public sealed class LocalLaunchOptionsSerializer : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"LocalLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriter1)writer).Write32_LocalLaunchOptions(objectToSerialize);
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReader1)reader).Read32_LocalLaunchOptions();
        }
    }

    public sealed class SerialPortLaunchOptionsSerializer : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"SerialPortLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriter1)writer).Write33_SerialPortLaunchOptions(objectToSerialize);
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReader1)reader).Read33_SerialPortLaunchOptions();
        }
    }

    public sealed class PipeLaunchOptionsSerializer : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"PipeLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriter1)writer).Write34_PipeLaunchOptions(objectToSerialize);
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReader1)reader).Read34_PipeLaunchOptions();
        }
    }

    public sealed class TcpLaunchOptionsSerializer : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"TcpLaunchOptions", @"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriter1)writer).Write35_TcpLaunchOptions(objectToSerialize);
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReader1)reader).Read35_TcpLaunchOptions();
        }
    }

    public class XmlSerializerContract : global::System.Xml.Serialization.XmlSerializerImplementation {
        public override global::System.Xml.Serialization.XmlSerializationReader Reader { get { return new XmlSerializationReader1(); } }
        public override global::System.Xml.Serialization.XmlSerializationWriter Writer { get { return new XmlSerializationWriter1(); } }
        System.Collections.Hashtable readMethods = null;
        public override System.Collections.Hashtable ReadMethods {
            get {
                if (readMethods == null) {
                    System.Collections.Hashtable _tmp = new System.Collections.Hashtable();
                    _tmp[@"MICore.Xml.LaunchOptions.AndroidLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:"] = @"Read21_AndroidLaunchOptions";
                    _tmp[@"MICore.Xml.LaunchOptions.TargetArchitecture::"] = @"Read22_TargetArchitecture";
                    _tmp[@"MICore.Xml.LaunchOptions.MIMode::"] = @"Read23_MIMode";
                    _tmp[@"MICore.Xml.LaunchOptions.Command::"] = @"Read24_Command";
                    _tmp[@"MICore.Xml.LaunchOptions.BaseLaunchOptions::"] = @"Read25_BaseLaunchOptions";
                    _tmp[@"MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand::"] = @"Read26_Item";
                    _tmp[@"MICore.Xml.LaunchOptions.IOSLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:"] = @"Read27_IOSLaunchOptions";
                    _tmp[@"MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget::"] = @"Read28_IOSLaunchOptionsIOSDebugTarget";
                    _tmp[@"MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure::"] = @"Read29_IOSLaunchOptionsSecure";
                    _tmp[@"MICore.Xml.LaunchOptions.BlackBerryLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:"] = @"Read30_BlackBerryLaunchOptions";
                    _tmp[@"MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType::"] = @"Read31_Item";
                    _tmp[@"MICore.Xml.LaunchOptions.LocalLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:"] = @"Read32_LocalLaunchOptions";
                    _tmp[@"MICore.Xml.LaunchOptions.SerialPortLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:"] = @"Read33_SerialPortLaunchOptions";
                    _tmp[@"MICore.Xml.LaunchOptions.PipeLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:"] = @"Read34_PipeLaunchOptions";
                    _tmp[@"MICore.Xml.LaunchOptions.TcpLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:"] = @"Read35_TcpLaunchOptions";
                    if (readMethods == null) readMethods = _tmp;
                }
                return readMethods;
            }
        }
        System.Collections.Hashtable writeMethods = null;
        public override System.Collections.Hashtable WriteMethods {
            get {
                if (writeMethods == null) {
                    System.Collections.Hashtable _tmp = new System.Collections.Hashtable();
                    _tmp[@"MICore.Xml.LaunchOptions.AndroidLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:"] = @"Write21_AndroidLaunchOptions";
                    _tmp[@"MICore.Xml.LaunchOptions.TargetArchitecture::"] = @"Write22_TargetArchitecture";
                    _tmp[@"MICore.Xml.LaunchOptions.MIMode::"] = @"Write23_MIMode";
                    _tmp[@"MICore.Xml.LaunchOptions.Command::"] = @"Write24_Command";
                    _tmp[@"MICore.Xml.LaunchOptions.BaseLaunchOptions::"] = @"Write25_BaseLaunchOptions";
                    _tmp[@"MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand::"] = @"Write26_Item";
                    _tmp[@"MICore.Xml.LaunchOptions.IOSLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:"] = @"Write27_IOSLaunchOptions";
                    _tmp[@"MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget::"] = @"Write28_IOSLaunchOptionsIOSDebugTarget";
                    _tmp[@"MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure::"] = @"Write29_IOSLaunchOptionsSecure";
                    _tmp[@"MICore.Xml.LaunchOptions.BlackBerryLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:"] = @"Write30_BlackBerryLaunchOptions";
                    _tmp[@"MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType::"] = @"Write31_Item";
                    _tmp[@"MICore.Xml.LaunchOptions.LocalLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:"] = @"Write32_LocalLaunchOptions";
                    _tmp[@"MICore.Xml.LaunchOptions.SerialPortLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:"] = @"Write33_SerialPortLaunchOptions";
                    _tmp[@"MICore.Xml.LaunchOptions.PipeLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:"] = @"Write34_PipeLaunchOptions";
                    _tmp[@"MICore.Xml.LaunchOptions.TcpLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:"] = @"Write35_TcpLaunchOptions";
                    if (writeMethods == null) writeMethods = _tmp;
                }
                return writeMethods;
            }
        }
        System.Collections.Hashtable typedSerializers = null;
        public override System.Collections.Hashtable TypedSerializers {
            get {
                if (typedSerializers == null) {
                    System.Collections.Hashtable _tmp = new System.Collections.Hashtable();
                    _tmp.Add(@"MICore.Xml.LaunchOptions.TargetArchitecture::", new TargetArchitectureSerializer());
                    _tmp.Add(@"MICore.Xml.LaunchOptions.BaseLaunchOptions::", new BaseLaunchOptionsSerializer());
                    _tmp.Add(@"MICore.Xml.LaunchOptions.IOSLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:", new IOSLaunchOptionsSerializer());
                    _tmp.Add(@"MICore.Xml.LaunchOptions.BlackBerryLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:", new BlackBerryLaunchOptionsSerializer());
                    _tmp.Add(@"MICore.Xml.LaunchOptions.SerialPortLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:", new SerialPortLaunchOptionsSerializer());
                    _tmp.Add(@"MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure::", new IOSLaunchOptionsSecureSerializer());
                    _tmp.Add(@"MICore.Xml.LaunchOptions.Command::", new CommandSerializer());
                    _tmp.Add(@"MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget::", new IOSLaunchOptionsIOSDebugTargetSerializer());
                    _tmp.Add(@"MICore.Xml.LaunchOptions.MIMode::", new MIModeSerializer());
                    _tmp.Add(@"MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand::", new BaseLaunchOptionsLaunchCompleteCommandSerializer());
                    _tmp.Add(@"MICore.Xml.LaunchOptions.LocalLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:", new LocalLaunchOptionsSerializer());
                    _tmp.Add(@"MICore.Xml.LaunchOptions.PipeLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:", new PipeLaunchOptionsSerializer());
                    _tmp.Add(@"MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType::", new BlackBerryLaunchOptionsTargetTypeSerializer());
                    _tmp.Add(@"MICore.Xml.LaunchOptions.AndroidLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:", new AndroidLaunchOptionsSerializer());
                    _tmp.Add(@"MICore.Xml.LaunchOptions.TcpLaunchOptions:http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014::False:", new TcpLaunchOptionsSerializer());
                    if (typedSerializers == null) typedSerializers = _tmp;
                }
                return typedSerializers;
            }
        }
        public override System.Boolean CanSerialize(System.Type type) {
            if (type == typeof(global::MICore.Xml.LaunchOptions.AndroidLaunchOptions)) return true;
            if (type == typeof(global::MICore.Xml.LaunchOptions.TargetArchitecture)) return true;
            if (type == typeof(global::MICore.Xml.LaunchOptions.MIMode)) return true;
            if (type == typeof(global::MICore.Xml.LaunchOptions.Command)) return true;
            if (type == typeof(global::MICore.Xml.LaunchOptions.BaseLaunchOptions)) return true;
            if (type == typeof(global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand)) return true;
            if (type == typeof(global::MICore.Xml.LaunchOptions.IOSLaunchOptions)) return true;
            if (type == typeof(global::MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget)) return true;
            if (type == typeof(global::MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure)) return true;
            if (type == typeof(global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptions)) return true;
            if (type == typeof(global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType)) return true;
            if (type == typeof(global::MICore.Xml.LaunchOptions.LocalLaunchOptions)) return true;
            if (type == typeof(global::MICore.Xml.LaunchOptions.SerialPortLaunchOptions)) return true;
            if (type == typeof(global::MICore.Xml.LaunchOptions.PipeLaunchOptions)) return true;
            if (type == typeof(global::MICore.Xml.LaunchOptions.TcpLaunchOptions)) return true;
            return false;
        }
        public override System.Xml.Serialization.XmlSerializer GetSerializer(System.Type type) {
            if (type == typeof(global::MICore.Xml.LaunchOptions.AndroidLaunchOptions)) return new AndroidLaunchOptionsSerializer();
            if (type == typeof(global::MICore.Xml.LaunchOptions.TargetArchitecture)) return new TargetArchitectureSerializer();
            if (type == typeof(global::MICore.Xml.LaunchOptions.MIMode)) return new MIModeSerializer();
            if (type == typeof(global::MICore.Xml.LaunchOptions.Command)) return new CommandSerializer();
            if (type == typeof(global::MICore.Xml.LaunchOptions.BaseLaunchOptions)) return new BaseLaunchOptionsSerializer();
            if (type == typeof(global::MICore.Xml.LaunchOptions.BaseLaunchOptionsLaunchCompleteCommand)) return new BaseLaunchOptionsLaunchCompleteCommandSerializer();
            if (type == typeof(global::MICore.Xml.LaunchOptions.IOSLaunchOptions)) return new IOSLaunchOptionsSerializer();
            if (type == typeof(global::MICore.Xml.LaunchOptions.IOSLaunchOptionsIOSDebugTarget)) return new IOSLaunchOptionsIOSDebugTargetSerializer();
            if (type == typeof(global::MICore.Xml.LaunchOptions.IOSLaunchOptionsSecure)) return new IOSLaunchOptionsSecureSerializer();
            if (type == typeof(global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptions)) return new BlackBerryLaunchOptionsSerializer();
            if (type == typeof(global::MICore.Xml.LaunchOptions.BlackBerryLaunchOptionsTargetType)) return new BlackBerryLaunchOptionsTargetTypeSerializer();
            if (type == typeof(global::MICore.Xml.LaunchOptions.LocalLaunchOptions)) return new LocalLaunchOptionsSerializer();
            if (type == typeof(global::MICore.Xml.LaunchOptions.SerialPortLaunchOptions)) return new SerialPortLaunchOptionsSerializer();
            if (type == typeof(global::MICore.Xml.LaunchOptions.PipeLaunchOptions)) return new PipeLaunchOptionsSerializer();
            if (type == typeof(global::MICore.Xml.LaunchOptions.TcpLaunchOptions)) return new TcpLaunchOptionsSerializer();
            return null;
        }
    }
}
